hello hi

%

[[][ text "hello hi" ]]

%

{! my comment hi }

%

[[][ comment "my comment hi" ]]

%

both text {! and comment }

%

[[][ text "both text ", comment "and comment"]]

%

{!a comment}some text {! another comment

  but this
    time
  it
   is multi
   line!
}

%

[[][ comment "a comment", text "some text ", comment "another comment

  but this
    time
  it
   is multi
   line!" ]
]

%

hello {name} world

%

[[][
  text "hello ",
  var .name,
  text " world"
]]

%

<div>
  <p>Hello {name}</p>
</div>

%

[
  div [][
    p [][
      text "Hello ",
      var .name
    ]
  ]
]

%

<div></div>

%

[ div [][] ]

%

<custom></custom>

%

[ custom [][] ]

%

<div>
  <ul>
    <li>Apple</li>
    <li>{Banana}</li>
    <li>Kiwi</li>
  </ul>
</div>

%

[
  div [] [
    ul [] [
      li [] [ text "Apple"],
      li [] [ var .Banana ],
      li [] [ text "Kiwi" ]
    ]
  ]
]

%

<div>
  <p>
    <area>
    <area>
    <area></area>
    <area>
  </p>
</div>

%

[
  div[][
    p[][
      area[][],
      area[][],
      area[][],
      area[][]
      ]
  ]
]

%

<input />
<input>
<input>
<input>bazbar</input>

%

[[][
  input[][],
  input[][],
  input[][],
  input[][],
  text "bazbar"
]]

%

<hr />
<hr>
<hr />
<hr />
<img src="quu">
<img src="quux">
<p>test</p>

%

[[][
  hr[][], hr[][], hr[][], hr[][],
  img [ src text "quu" ][],
  img [ src text "quux" ][],
  p[] [ text "test" ]
]]

%

<img id="baz" src={filesource}>

%

[ img [ id text "baz", src var .filesource ] [] ]

%

<input>
<span>{name}</span>

%

[[][ input [][], span [][ var .name ] ]]

%

<img src="test.png" alt={description} id="should {betext}" />

%

[
  img [
    src text "test.png",
    alt var .description,
    id text "should {betext}"
  ][]
]

%

<p>
  {?isAdmin}Welcome back!{/isAdmin}
</p>

%

[
  p
  []
  [
    when .isAdmin
    [
      []
      [
        text "Welcome back!"
      ]
    ]
  ]
]

%

{^isAdmin}
  {#users}
    <li>{name}</li>
  {/users}
{/isAdmin}

%

[
  unless .isAdmin [
    range .users [
      li [key var users.#.key] [ var users.#.name ]
    ]
  ]
]

%

{#unclosedrange}
  <li>{stillbuildstree}</li>

%

[
  range .unclosedrange [
    li [] [var unclosedrange.#.stillbuildstree ]
  ]
]

%

{#fruits}
  {#x}
    <u class={style}>
      {^name}
        <li>No name</li>
      {/name}
      {?name}
        <li>{name}</li>
      {/name}
    </u>
  {/x}
{/fruits}

%

[
  range .fruits [
    range fruits.#.x [
      u [key var fruits.#.x.#.key, class var fruits.#.x.#.style ][
        unless fruits.#.x.#.name [
          li [] [text "No name"]
        ],
        when fruits.#.x.#.name [
          li [] [var fruits.#.x.#.name ]
        ]
      ]
    ]
  ]
]

%

{! uninitialized element }
</x>

%

[[][ comment "uninitialized element"]]

%

{! element e mismatch }
<x>
  <d>
    <y></y>
  </e>
</x>

%

[
  []
  [
    comment "element e mismatch",
    x[][ d[][ y[][] ] ]
  ]
]

%

{! uninitialized control }
{/x}

%

[[][ comment "uninitialized control"]]

%

{#x}
  {#d}
    {#y}
      {name}
    {/y}
    {^z}
      {name}
    {/z}
  {/d}
{/x}

%

[ range .x [
    range x.#.d [
      React.Fragment[
        key var x.#.key
      ][
        range x.#.d.#.y [
          var x.#.d.#.y.#.name
        ],
        unless x.#.d.#.z [
          var x.#.d.#.name
        ]
      ]
    ]
  ]
]

%

test one {! comment here } ending

%

[[][
  text "test one ",
  comment "comment here",
  text " ending"
]]

%

<div><img src="logo.png" /><span>Brand {company}</span></div>

%

[
  div [] [
    img [ src text "logo.png"] [],
    span [] [
      text "Brand ",
      var .company
    ]
  ]
]

%

<ul>{#items}<li>{itemName}</li>{/items}</ul>

%

[
  ul [] [
    range .items [
      li [key var items.#.key] [ var items.#.itemName ]
    ]
  ]
]

%

{?loggedIn}<p>Hi {username}</p>{/loggedIn}{^loggedIn}<p>Please log in.</p>{/loggedIn}

%

[[][
  when .loggedIn [
    p [] [ text "Hi ", var .username ]
  ],
  unless .loggedIn [
    p [] [ text "Please log in." ]
  ]
]]

%

<section>
  {! header section }
  <header>{pageTitle}</header>
  {! main content }
  <main>{content}</main>
</section>

%

[
  section [] [
    comment "header section",
    header [] [ var .pageTitle ],
    comment "main content",
    main [] [ var .content ]
  ]
]

%

{#library}
  {?open}
    {#shelves}
      {^empty}
        {book.title}
      {/empty}
    {/shelves}
  {/open}
{/library}

%

[
  range .library [
    when library.#.open [
      range library.#.shelves [
        unless library.#.shelves.#.empty [
          var library.#.shelves.#.book.title
        ]
      ]
    ]
  ]
]

%

{#team}
  {?active}
    {name} is active.
  {/active}
  {^active}
    {name} is inactive.
  {/active}
{/team}

%

[
  range .team [
    React.Fragment [
      key var .key
    ]
    [
      when team.#.active [
        [][
          var team.#.name,
          text " is active. "
        ]
      ],
      unless team.#.active [
        [][
          var team.#.name,
          text " is inactive. "
        ]
      ]
    ]
  ]
]

%

{#countries}
  {name}:
  {#cities}
    {name},
  {/cities}
  {?visited}
    (visited)
  {/visited}
  {^visited}
    (not visited)
  {/visited}
{/countries}

%

[
  range .countries
  [
    React.Fragment
    [
      key var .key
    ]
    [
      var countries.#.name,
      text ": ",
      range countries.#.cities
      [
        React.Fragment
        [
          key var countries.#.key
        ]
        [
          var countries.#.cities.#.name,
          text ", "
        ]
      ],
      when countries.#.visited
      [
        []
        [
          text " (visited) "
        ]
      ],
      unless countries.#.visited
      [
        []
        [
          text " (not visited) "
        ]
      ]
    ]
  ]
]

%

{#bookstore}
  {#sections}
    Section: {name}
    {?popular}
      - Popular section!
    {/popular}
    {#books}
      {?bestseller}
        {title} (bestseller)
      {/bestseller}
      {^bestseller}
        {title}
      {/bestseller}
    {/books}
  {/sections}
{/bookstore}

%

[
  range .bookstore
  [
    range bookstore.#.sections
    [
      React.Fragment
      [
        key var bookstore.#.key
      ]
      [
        text " Section: ",
        var bookstore.#.sections.#.name,
        when bookstore.#.sections.#.popular
        [
          []
          [
            text " - Popular section! "
          ]
        ],
        range bookstore.#.sections.#.books
        [
          React.Fragment
          [
            key var bookstore.#.sections.#.key
          ]
          [
            when bookstore.#.sections.#.books.#.bestseller
            [
              []
              [
                var bookstore.#.sections.#.books.#.title,
                text " (bestseller) "
              ]
            ],
            unless bookstore.#.sections.#.books.#.bestseller
            [
              var bookstore.#.sections.#.books.#.title
            ]
          ]
        ]
      ]
    ]
  ]
]

%

{#menu}
  {?available}
    {dish} (${price})
  {/available}
  {^available}
    {dish} (unavailable)
  {/available}
{/menu}

%

[
  range .menu[
    React.Fragment[
      key var .key
    ][
      when menu.#.available[
        [][
          var menu.#.dish,
          text " ($", var menu.#.price, text ") "
        ]
      ],
      unless menu.#.available[
        [][
          var menu.#.dish, text " (unavailable) "
        ]
      ]
    ]
  ]
]

%

{#classes}
  Class: {name}
  {?full}
    (Full)
  {/full}
  {^full}
    Spots open: {spots.remaining}
  {/full}
  {#students}
    {?passed}
      {name}: Passed
    {/passed}
    {^passed}
      {name}: Failed
    {/passed}
  {/students}
{/classes}

%

[
  range .classes
  [
    React.Fragment
    [
      key var .key
    ]
    [
      text " Class: ",
      var classes.#.name,
      when classes.#.full
      [
        []
        [
          text " (Full) "
        ]
      ],
      unless classes.#.full
      [
        []
        [
          text " Spots open: ",
          var classes.#.spots.remaining
        ]
      ],
      range classes.#.students
      [
        React.Fragment
        [
          key var classes.#.key
        ]
        [
          when classes.#.students.#.passed
          [
            []
            [
              var classes.#.students.#.name,
              text ": Passed "
            ]
          ],
          unless classes.#.students.#.passed
          [
            []
            [
              var classes.#.students.#.name,
              text ": Failed "
            ]
          ]
        ]
      ]
    ]
  ]
]

%

{#catalog}
  <section class={section.class}>
    {?featured}
      <h1>{section.title}</h1>
    {/featured}
    {^featured}
      <h2>{section.title}</h2>
    {/featured}
    {#products}
      <article id={sku}>
        <img src={image.url} alt={image.alt}>
        {?onSale}
          <span class="discount">{discount}% OFF</span>
        {/onSale}
        <footer>
          {#reviews}
            {?highlighted}
              <p class="highlight">{text} - by {author.name}</p>
            {/highlighted}
            {^highlighted}
              <p>{text} - by {author.name}</p>
            {/highlighted}
          {/reviews}
          {^reviews}
            <p>No reviews yet.</p>
          {/reviews}
        </footer>
      </article>
    {/products}
  </section>
{/catalog}

%

[
  range .catalog
  [
    section
    [
      key var catalog.#.key,
      class var catalog.#.section.class
    ]
    [
      when catalog.#.featured
      [
        h1
        []
        [
          var catalog.#.section.title
        ]
      ],
      unless catalog.#.featured
      [
        h2
        []
        [
          var catalog.#.section.title
        ]
      ],
      range catalog.#.products
      [
        article
        [
          key var catalog.#.products.#.key,
          id var catalog.#.products.#.sku
        ]
        [
          img
          [
            src var catalog.#.products.#.image.url,
            alt var catalog.#.products.#.image.alt
          ]
          [],
          when catalog.#.products.#.onSale
          [
            span
            [
              class text "discount"
            ]
            [
              var catalog.#.products.#.discount,
              text "% OFF"
            ]
          ],
          footer
          []
          [
            range catalog.#.products.#.reviews
            [
              React.Fragment
              [
                key var catalog.#.products.#.key
              ]
              [
                when catalog.#.products.#.reviews.#.highlighted
                [
                  p
                  [
                    class text "highlight"
                  ]
                  [
                    var catalog.#.products.#.reviews.#.text,
                    text " - by ",
                    var catalog.#.products.#.reviews.#.author.name
                  ]
                ],
                unless catalog.#.products.#.reviews.#.highlighted
                [
                  p
                  []
                  [
                    var catalog.#.products.#.reviews.#.text,
                    text " - by ",
                    var catalog.#.products.#.reviews.#.author.name
                  ]
                ]
              ]
            ],
            unless catalog.#.products.#.reviews
            [
              p
              []
              [
                text "No reviews yet."
              ]
            ]
          ]
        ]
      ]
    ]
  ]
]

%

<div id="dashboard">
  {#users}
    <div class={role}>
      <span>{name.first} {name.last}</span>
      {?online}
        <span class="status online">Online</span>
      {/online}
      {^online}
        <span class="status offline">Offline since {lastSeen}</span>
      {/online}
      {#tasks}
        <li data-task-id={id}>
          {?completed}
            <span class="done">{title}</span>
          {/completed}
          {^completed}
            <span>{title}</span>
          {/completed}
        </li>
      {/tasks}
      {^tasks}
        <p>No tasks assigned.</p>
      {/tasks}
    </div>
  {/users}
</div>

%

[
  div
  [
    id text "dashboard"
  ]
  [
    range .users
    [
      div
      [
        key var users.#.key,
        class var users.#.role
      ]
      [
        span
        []
        [
          var users.#.name.first,
          var users.#.name.last
        ],
        when users.#.online
        [
          span
          [
            class text "status online"
          ]
          [
            text "Online"
          ]
        ],
        unless users.#.online
        [
          span
          [
            class text "status offline"
          ]
          [
            text "Offline since ",
            var users.#.lastSeen
          ]
        ],
        range users.#.tasks
        [
          li
          [
            key var users.#.tasks.#.key,
            data-task-id var users.#.tasks.#.id
          ]
          [
            when users.#.tasks.#.completed
            [
              span
              [
                class text "done"
              ]
              [
                var users.#.tasks.#.title
              ]
            ],
            unless users.#.tasks.#.completed
            [
              span
              []
              [
                var users.#.tasks.#.title
              ]
            ]
          ]
        ],
        unless users.#.tasks
        [
          p
          []
          [
            text "No tasks assigned."
          ]
        ]
      ]
    ]
  ]
]

%

{#projects}
  <div data-project={id} class="{status}">
    <header>
      <h3>{name}</h3>
      {?archived}
        <span class="badge">Archived</span>
      {/archived}
    </header>
    <ul>
      {#milestones}
        <li>
          <strong>{title}</strong>
          {?dueDate}
            <em>Due: {dueDate}</em>
          {/dueDate}
          {#tasks}
            <input type="checkbox" data-assignee={assignee.id} />
            <label>{description}</label>
          {/tasks}
        </li>
      {/milestones}
      {^milestones}
        <li>No milestones defined.</li>
      {/milestones}
    </ul>
  </div>
{/projects}

%

[
  range .projects
  [
    div
    [
      key var projects.#.key,
      data-project var projects.#.id,
      class var projects.#.status
    ]
    [
      header
      []
      [
        h3
        []
        [
          var projects.#.name
        ],
        when projects.#.archived
        [
          span
          [
            class text "badge"
          ]
          [
            text "Archived"
          ]
        ]
      ],
      ul
      []
      [
        range projects.#.milestones
        [
          li
          [
            key var projects.#.milestones.#.key
          ]
          [
            strong
            []
            [
              var projects.#.milestones.#.title
            ],
            when projects.#.milestones.#.dueDate
            [
              em
              []
              [
                text "Due: ",
                var projects.#.milestones.#.dueDate
              ]
            ],
            range projects.#.milestones.#.tasks
            [
              React.Fragment
              [
                key var projects.#.milestones.#.key
              ]
              [
                input
                [
                  type text "checkbox",
                  data-assignee var projects.#.milestones.#.tasks.#.assignee.id
                ]
                [],
                label
                []
                [
                  var projects.#.milestones.#.tasks.#.description
                ]
              ]
            ]
          ]
        ],
        unless projects.#.milestones
        [
          li
          []
          [
            text "No milestones defined."
          ]
        ]
      ]
    ]
  ]
]

%

<accesskey>hi</accesskey>

%

[ accesskey[][ text "hi"]]

%

<img task-id="5" />

%

[ img[ taskId text "5"][]]

%

<accesskey task-id={taskID} />

%

[ accesskey[ taskId var .taskID][]]

%

<link imagesrcset=42 imagesrcsetnot=55 />

%

[ link[ imageSrcSet text "42", imagesrcsetnot text "55"][]]
